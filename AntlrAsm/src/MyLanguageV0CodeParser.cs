//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\AntlrAsm\MyLanguageV0Code.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MyLanguageV0CodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ENDIF=2, PRINT=3, INT=4, PLUS=5, EQUAL=6, ASSIGN=7, NOTEQUAL=8, 
		SEMICOLON=9, LPAREN=10, RPAREN=11, INTEGER=12, NAME=13, WS=14;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_statement = 2, RULE_ifstmt = 3, 
		RULE_printstmt = 4, RULE_assignstmt = 5, RULE_expression = 6, RULE_term = 7, 
		RULE_identifier = 8, RULE_integer = 9;
	public static readonly string[] ruleNames = {
		"program", "declaration", "statement", "ifstmt", "printstmt", "assignstmt", 
		"expression", "term", "identifier", "integer"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'endif'", "'print'", "'int'", "'+'", "'=='", "'='", "'!='", 
		"';'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ENDIF", "PRINT", "INT", "PLUS", "EQUAL", "ASSIGN", "NOTEQUAL", 
		"SEMICOLON", "LPAREN", "RPAREN", "INTEGER", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyLanguageV0Code.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MyLanguageV0CodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyLanguageV0CodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyLanguageV0CodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT) {
				{
				{
				State = 20; declaration();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << PRINT) | (1L << NAME))) != 0)) {
				{
				{
				State = 26; statement();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public IToken a;
		public ITerminalNode INT() { return GetToken(MyLanguageV0CodeParser.INT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MyLanguageV0CodeParser.SEMICOLON, 0); }
		public ITerminalNode NAME() { return GetToken(MyLanguageV0CodeParser.NAME, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(INT);
			State = 33; _localctx.a = Match(NAME);
			State = 34; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		public AssignstmtContext assignstmt() {
			return GetRuleContext<AssignstmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; ifstmt();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; printstmt();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; assignstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MyLanguageV0CodeParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyLanguageV0CodeParser.LPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(MyLanguageV0CodeParser.EQUAL, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyLanguageV0CodeParser.RPAREN, 0); }
		public ITerminalNode ENDIF() { return GetToken(MyLanguageV0CodeParser.ENDIF, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(IF);
			State = 42; Match(LPAREN);
			State = 43; identifier();
			State = 44; Match(EQUAL);
			State = 45; integer();
			State = 46; Match(RPAREN);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << PRINT) | (1L << NAME))) != 0)) {
				{
				{
				State = 47; statement();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 53; Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(MyLanguageV0CodeParser.PRINT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MyLanguageV0CodeParser.SEMICOLON, 0); }
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_printstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(PRINT);
			State = 56; term();
			State = 57; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignstmtContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MyLanguageV0CodeParser.NAME, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MyLanguageV0CodeParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MyLanguageV0CodeParser.SEMICOLON, 0); }
		public AssignstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterAssignstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitAssignstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignstmtContext assignstmt() {
		AssignstmtContext _localctx = new AssignstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(NAME);
			State = 60; Match(ASSIGN);
			State = 61; expression();
			State = 62; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(MyLanguageV0CodeParser.PLUS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; term();
				State = 66; Match(PLUS);
				State = 67; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 14, RULE_term);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; identifier();
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MyLanguageV0CodeParser.NAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(MyLanguageV0CodeParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyLanguageV0CodeListener typedListener = listener as IMyLanguageV0CodeListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageV0CodeVisitor<TResult> typedVisitor = visitor as IMyLanguageV0CodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', 'R', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x1B', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x1E', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '!', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '*', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x33', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x36', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'H', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'L', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', 
		'\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x2', '\x2', '\x2', 'N', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', ')', '\x3', '\x2', 
		'\x2', '\x2', '\b', '+', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\f', '=', '\x3', '\x2', '\x2', '\x2', '\xE', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'K', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x14', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x18', '\x5', '\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1D', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x3', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\a', '\x6', '\x2', '\x2', '#', '$', '\a', '\xF', 
		'\x2', '\x2', '$', '%', '\a', '\v', '\x2', '\x2', '%', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '&', '*', '\x5', '\b', '\x5', '\x2', '\'', '*', '\x5', '\n', 
		'\x6', '\x2', '(', '*', '\x5', '\f', '\a', '\x2', ')', '&', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', 
		'\x2', '\x2', '\x2', '*', '\a', '\x3', '\x2', '\x2', '\x2', '+', ',', 
		'\a', '\x3', '\x2', '\x2', ',', '-', '\a', '\f', '\x2', '\x2', '-', '.', 
		'\x5', '\x12', '\n', '\x2', '.', '/', '\a', '\b', '\x2', '\x2', '/', '\x30', 
		'\x5', '\x14', '\v', '\x2', '\x30', '\x34', '\a', '\r', '\x2', '\x2', 
		'\x31', '\x33', '\x5', '\x6', '\x4', '\x2', '\x32', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\x4', '\x2', '\x2', '\x38', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x5', '\x2', '\x2', ':', 
		';', '\x5', '\x10', '\t', '\x2', ';', '<', '\a', '\v', '\x2', '\x2', '<', 
		'\v', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\xF', '\x2', '\x2', 
		'>', '?', '\a', '\t', '\x2', '\x2', '?', '@', '\x5', '\xE', '\b', '\x2', 
		'@', '\x41', '\a', '\v', '\x2', '\x2', '\x41', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x42', 'H', '\x5', '\x10', '\t', '\x2', '\x43', '\x44', '\x5', 
		'\x10', '\t', '\x2', '\x44', '\x45', '\a', '\a', '\x2', '\x2', '\x45', 
		'\x46', '\x5', '\x10', '\t', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x42', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\xF', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x5', 
		'\x12', '\n', '\x2', 'J', 'L', '\x5', '\x14', '\v', '\x2', 'K', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\xF', '\x2', '\x2', 'N', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\xE', '\x2', '\x2', 
		'P', '\x15', '\x3', '\x2', '\x2', '\x2', '\b', '\x19', '\x1F', ')', '\x34', 
		'G', 'K',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
