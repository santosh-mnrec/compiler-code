//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\AntlrAsm\MyLanguageV0Code.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MyLanguageV0CodeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ENDIF=2, PRINT=3, INT=4, PLUS=5, EQUAL=6, ASSIGN=7, NOTEQUAL=8, 
		SEMICOLON=9, LPAREN=10, RPAREN=11, INTEGER=12, NAME=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "ENDIF", "PRINT", "INT", "PLUS", "EQUAL", "ASSIGN", "NOTEQUAL", 
		"SEMICOLON", "LPAREN", "RPAREN", "INTEGER", "NAME", "WS"
	};


	public MyLanguageV0CodeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MyLanguageV0CodeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'endif'", "'print'", "'int'", "'+'", "'=='", "'='", "'!='", 
		"';'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ENDIF", "PRINT", "INT", "PLUS", "EQUAL", "ASSIGN", "NOTEQUAL", 
		"SEMICOLON", "LPAREN", "RPAREN", "INTEGER", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyLanguageV0Code.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MyLanguageV0CodeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x10', 'U', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x45', '\n', '\r', 
		'\f', '\r', '\xE', '\r', 'H', '\v', '\r', '\x3', '\xE', '\x6', '\xE', 
		'K', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'L', '\x3', '\xF', '\x6', 
		'\xF', 'P', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 'Q', '\x3', '\xF', 
		'\x3', '\xF', '\x2', '\x2', '\x10', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', 
		'\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', 
		'\x1D', '\x10', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', '\x3', 
		'\x2', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', 
		'\x2', 'W', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x5', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\a', '(', '\x3', '\x2', '\x2', '\x2', '\t', 
		'.', '\x3', '\x2', '\x2', '\x2', '\v', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\x34', '\x3', '\x2', '\x2', '\x2', '\xF', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x39', '\x3', '\x2', '\x2', '\x2', '\x13', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '>', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x19', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', 'J', '\x3', '\x2', '\x2', '\x2', '\x1D', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', ' ', '\a', 'k', '\x2', '\x2', ' ', '!', '\a', 'h', 
		'\x2', '\x2', '!', '\x4', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', 
		'g', '\x2', '\x2', '#', '$', '\a', 'p', '\x2', '\x2', '$', '%', '\a', 
		'\x66', '\x2', '\x2', '%', '&', '\a', 'k', '\x2', '\x2', '&', '\'', '\a', 
		'h', '\x2', '\x2', '\'', '\x6', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\a', 'r', '\x2', '\x2', ')', '*', '\a', 't', '\x2', '\x2', '*', '+', 
		'\a', 'k', '\x2', '\x2', '+', ',', '\a', 'p', '\x2', '\x2', ',', '-', 
		'\a', 'v', '\x2', '\x2', '-', '\b', '\x3', '\x2', '\x2', '\x2', '.', '/', 
		'\a', 'k', '\x2', '\x2', '/', '\x30', '\a', 'p', '\x2', '\x2', '\x30', 
		'\x31', '\a', 'v', '\x2', '\x2', '\x31', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\a', '-', '\x2', '\x2', '\x33', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\a', '?', '\x2', '\x2', '\x35', '\x36', '\a', 
		'?', '\x2', '\x2', '\x36', '\xE', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '?', '\x2', '\x2', '\x38', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '#', '\x2', '\x2', ':', ';', '\a', '?', '\x2', 
		'\x2', ';', '\x12', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '=', '\x2', 
		'\x2', '=', '\x14', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '*', '\x2', 
		'\x2', '?', '\x16', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '+', 
		'\x2', '\x2', '\x41', '\x18', '\x3', '\x2', '\x2', '\x2', '\x42', '\x46', 
		'\t', '\x2', '\x2', '\x2', '\x43', '\x45', '\t', '\x2', '\x2', '\x2', 
		'\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x1A', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\t', '\x3', '\x2', '\x2', 
		'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', '\x1C', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\t', '\x4', '\x2', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\b', '\xF', '\x2', 
		'\x2', 'T', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x6', '\x2', '\x46', 
		'L', 'Q', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
