//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\ANTLRVisitor\Expression.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		INT=10, ID=11, WS=12;
	public const int
		RULE_root = 0, RULE_stmt = 1, RULE_expr = 2;
	public static readonly string[] ruleNames = {
		"root", "stmt", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'print'", "'*'", "'/'", "'+'", "'-'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "INT", "ID", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==ID) {
				{
				{
				State = 6; stmt();
				State = 7; Match(T__0);
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : StmtContext {
		public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt);
		try {
			State = 19;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; Match(ID);
				State = 15; Match(T__1);
				State = 16; expr(0);
				}
				break;
			case T__2:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 17; Match(T__2);
				State = 18; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdExprContext : ExprContext {
		public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public IdExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumExprContext : ExprContext {
		public ITerminalNode INT() { return GetToken(ExpressionParser.INT, 0); }
		public NumExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterNumExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitNumExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOpExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOpExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 22; Match(T__7);
				State = 23; expr(0);
				State = 24; Match(T__8);
				}
				break;
			case INT:
				{
				_localctx = new NumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(INT);
				}
				break;
			case ID:
				{
				_localctx = new IdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 38;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 36;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new OpExprContext(new ExprContext(_parentctx, _parentState));
						((OpExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 30;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 31;
						((OpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__3 || _la==T__4) ) {
							((OpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 32; ((OpExprContext)_localctx).right = expr(6);
						}
						break;
					case 2:
						{
						_localctx = new OpExprContext(new ExprContext(_parentctx, _parentState));
						((OpExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 33;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 34;
						((OpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==T__6) ) {
							((OpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 35; ((OpExprContext)_localctx).right = expr(5);
						}
						break;
					}
					} 
				}
				State = 40;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', ',', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\f', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xF', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x16', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x1F', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\'', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '*', '\v', '\x4', '\x3', '\x4', '\x2', 
		'\x3', '\x6', '\x5', '\x2', '\x4', '\x6', '\x2', '\x4', '\x3', '\x2', 
		'\x6', '\a', '\x3', '\x2', '\b', '\t', '\x2', '.', '\x2', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x15', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x5', '\x4', '\x3', '\x2', 
		'\t', '\n', '\a', '\x3', '\x2', '\x2', '\n', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\b', '\x3', '\x2', '\x2', '\x2', '\f', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\a', '\r', '\x2', '\x2', 
		'\x11', '\x12', '\a', '\x4', '\x2', '\x2', '\x12', '\x16', '\x5', '\x6', 
		'\x4', '\x2', '\x13', '\x14', '\a', '\x5', '\x2', '\x2', '\x14', '\x16', 
		'\x5', '\x6', '\x4', '\x2', '\x15', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x16', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x18', '\b', '\x4', '\x1', '\x2', '\x18', '\x19', 
		'\a', '\n', '\x2', '\x2', '\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', 
		'\x1A', '\x1B', '\a', '\v', '\x2', '\x2', '\x1B', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1F', '\a', '\f', '\x2', '\x2', '\x1D', '\x1F', 
		'\a', '\r', '\x2', '\x2', '\x1E', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '(', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\f', 
		'\a', '\x2', '\x2', '!', '\"', '\t', '\x2', '\x2', '\x2', '\"', '\'', 
		'\x5', '\x6', '\x4', '\b', '#', '$', '\f', '\x6', '\x2', '\x2', '$', '%', 
		'\t', '\x3', '\x2', '\x2', '%', '\'', '\x5', '\x6', '\x4', '\a', '&', 
		' ', '\x3', '\x2', '\x2', '\x2', '&', '#', '\x3', '\x2', '\x2', '\x2', 
		'\'', '*', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '\a', '\x3', '\x2', 
		'\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '\a', '\r', '\x15', 
		'\x1E', '&', '(',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
