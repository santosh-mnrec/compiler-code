//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\ANTLRVisitor\Expression.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IExpressionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoot([NotNull] ExpressionParser.RootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoot([NotNull] ExpressionParser.RootContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="ExpressionParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] ExpressionParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="ExpressionParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] ExpressionParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Print</c>
	/// labeled alternative in <see cref="ExpressionParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrint([NotNull] ExpressionParser.PrintContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Print</c>
	/// labeled alternative in <see cref="ExpressionParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrint([NotNull] ExpressionParser.PrintContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdExpr([NotNull] ExpressionParser.IdExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdExpr([NotNull] ExpressionParser.IdExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NumExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumExpr([NotNull] ExpressionParser.NumExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NumExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumExpr([NotNull] ExpressionParser.NumExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpr([NotNull] ExpressionParser.ParenExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpr([NotNull] ExpressionParser.ParenExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpExpr([NotNull] ExpressionParser.OpExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpExpr([NotNull] ExpressionParser.OpExprContext context);
}
