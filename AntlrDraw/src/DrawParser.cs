//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\AntlrDraw\Draw.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DrawParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Up=1, Down=2, Left=3, Right=4, Init=5, Draw=6, Display=7, NUMBER=8, WS=9;
	public const int
		RULE_prog = 0, RULE_stm = 1;
	public static readonly string[] ruleNames = {
		"prog", "stm"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "Up", "Down", "Left", "Right", "Init", "Draw", "Display", "NUMBER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Draw.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DrawParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DrawParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DrawParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public StmContext[] stm() {
			return GetRuleContexts<StmContext>();
		}
		public StmContext stm(int i) {
			return GetRuleContext<StmContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Up) | (1L << Down) | (1L << Left) | (1L << Right) | (1L << Init) | (1L << Draw) | (1L << Display))) != 0)) {
				{
				{
				State = 4; stm();
				}
				}
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmContext : ParserRuleContext {
		public StmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stm; } }
	 
		public StmContext() { }
		public virtual void CopyFrom(StmContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitContext : StmContext {
		public ITerminalNode Init() { return GetToken(DrawParser.Init, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(DrawParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(DrawParser.NUMBER, i);
		}
		public InitContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftContext : StmContext {
		public ITerminalNode Left() { return GetToken(DrawParser.Left, 0); }
		public LeftContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisplayContext : StmContext {
		public ITerminalNode Display() { return GetToken(DrawParser.Display, 0); }
		public DisplayContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpContext : StmContext {
		public ITerminalNode Up() { return GetToken(DrawParser.Up, 0); }
		public UpContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightContext : StmContext {
		public ITerminalNode Right() { return GetToken(DrawParser.Right, 0); }
		public RightContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DrawContext : StmContext {
		public ITerminalNode Draw() { return GetToken(DrawParser.Draw, 0); }
		public DrawContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterDraw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitDraw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDraw(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DownContext : StmContext {
		public ITerminalNode Down() { return GetToken(DrawParser.Down, 0); }
		public DownContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.EnterDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDrawListener typedListener = listener as IDrawListener;
			if (typedListener != null) typedListener.ExitDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDrawVisitor<TResult> typedVisitor = visitor as IDrawVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmContext stm() {
		StmContext _localctx = new StmContext(Context, State);
		EnterRule(_localctx, 2, RULE_stm);
		try {
			State = 19;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Init:
				_localctx = new InitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; Match(Init);
				State = 11; Match(NUMBER);
				State = 12; Match(NUMBER);
				}
				break;
			case Up:
				_localctx = new UpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 13; Match(Up);
				}
				break;
			case Down:
				_localctx = new DownContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 14; Match(Down);
				}
				break;
			case Left:
				_localctx = new LeftContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 15; Match(Left);
				}
				break;
			case Right:
				_localctx = new RightContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 16; Match(Right);
				}
				break;
			case Draw:
				_localctx = new DrawContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 17; Match(Draw);
				}
				break;
			case Display:
				_localctx = new DisplayContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 18; Match(Display);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x18', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\a', '\x2', '\b', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\v', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x16', '\n', '\x3', '\x3', '\x3', '\x2', 
		'\x2', '\x4', '\x2', '\x4', '\x2', '\x2', '\x2', '\x1C', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\b', '\x5', '\x4', '\x3', '\x2', '\a', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\v', '\x3', '\x2', '\x2', '\x2', '\t', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\n', '\x3', '\x2', '\x2', '\x2', '\n', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\t', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\a', '\a', '\x2', '\x2', '\r', '\xE', '\a', '\n', '\x2', '\x2', '\xE', 
		'\x16', '\a', '\n', '\x2', '\x2', '\xF', '\x16', '\a', '\x3', '\x2', '\x2', 
		'\x10', '\x16', '\a', '\x4', '\x2', '\x2', '\x11', '\x16', '\a', '\x5', 
		'\x2', '\x2', '\x12', '\x16', '\a', '\x6', '\x2', '\x2', '\x13', '\x16', 
		'\a', '\b', '\x2', '\x2', '\x14', '\x16', '\a', '\t', '\x2', '\x2', '\x15', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x15', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x10', '\x3', '\x2', '\x2', '\x2', '\x15', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x12', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x5', '\x3', '\x2', '\x2', '\x2', '\x4', '\t', '\x15',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
