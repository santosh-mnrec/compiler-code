//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\AntlrDraw\AntlrMethod.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AntlrMethodParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, Number=7, WS=8;
	public const int
		RULE_eval = 0, RULE_additionExp = 1, RULE_multiplyExp = 2, RULE_atomExp = 3;
	public static readonly string[] ruleNames = {
		"eval", "additionExp", "multiplyExp", "atomExp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "Number", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrMethod.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AntlrMethodParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrMethodParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrMethodParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EvalContext : ParserRuleContext {
		public AdditionExpContext additionExp() {
			return GetRuleContext<AdditionExpContext>(0);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrMethodVisitor<TResult> typedVisitor = visitor as IAntlrMethodVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 0, RULE_eval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; additionExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpContext : ParserRuleContext {
		public MultiplyExpContext[] multiplyExp() {
			return GetRuleContexts<MultiplyExpContext>();
		}
		public MultiplyExpContext multiplyExp(int i) {
			return GetRuleContext<MultiplyExpContext>(i);
		}
		public AdditionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.EnterAdditionExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.ExitAdditionExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrMethodVisitor<TResult> typedVisitor = visitor as IAntlrMethodVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionExpContext additionExp() {
		AdditionExpContext _localctx = new AdditionExpContext(Context, State);
		EnterRule(_localctx, 2, RULE_additionExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; multiplyExp();
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__1) {
				{
				State = 15;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 11; Match(T__0);
					State = 12; multiplyExp();
					}
					break;
				case T__1:
					{
					State = 13; Match(T__1);
					State = 14; multiplyExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpContext : ParserRuleContext {
		public AtomExpContext[] atomExp() {
			return GetRuleContexts<AtomExpContext>();
		}
		public AtomExpContext atomExp(int i) {
			return GetRuleContext<AtomExpContext>(i);
		}
		public MultiplyExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.EnterMultiplyExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.ExitMultiplyExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrMethodVisitor<TResult> typedVisitor = visitor as IAntlrMethodVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpContext multiplyExp() {
		MultiplyExpContext _localctx = new MultiplyExpContext(Context, State);
		EnterRule(_localctx, 4, RULE_multiplyExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; atomExp();
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				State = 25;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 21; Match(T__2);
					State = 22; atomExp();
					}
					break;
				case T__3:
					{
					State = 23; Match(T__3);
					State = 24; atomExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomExpContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(AntlrMethodParser.Number, 0); }
		public AdditionExpContext additionExp() {
			return GetRuleContext<AdditionExpContext>(0);
		}
		public AtomExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.EnterAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrMethodListener typedListener = listener as IAntlrMethodListener;
			if (typedListener != null) typedListener.ExitAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrMethodVisitor<TResult> typedVisitor = visitor as IAntlrMethodVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomExpContext atomExp() {
		AtomExpContext _localctx = new AtomExpContext(Context, State);
		EnterRule(_localctx, 6, RULE_atomExp);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; Match(Number);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; Match(T__4);
				State = 32; additionExp();
				State = 33; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '(', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x12', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x15', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x1C', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x1F', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '&', '\n', '\x5', '\x3', '\x5', 
		'\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x2', '\x2', '(', 
		'\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x16', '\x3', '\x2', '\x2', '\x2', '\b', '%', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\v', '\x5', '\x4', '\x3', '\x2', '\v', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x13', '\x5', '\x6', '\x4', '\x2', '\r', '\xE', 
		'\a', '\x3', '\x2', '\x2', '\xE', '\x12', '\x5', '\x6', '\x4', '\x2', 
		'\xF', '\x10', '\a', '\x4', '\x2', '\x2', '\x10', '\x12', '\x5', '\x6', 
		'\x4', '\x2', '\x11', '\r', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x5', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x1D', '\x5', '\b', '\x5', '\x2', 
		'\x17', '\x18', '\a', '\x5', '\x2', '\x2', '\x18', '\x1C', '\x5', '\b', 
		'\x5', '\x2', '\x19', '\x1A', '\a', '\x6', '\x2', '\x2', '\x1A', '\x1C', 
		'\x5', '\b', '\x5', '\x2', '\x1B', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '&', '\a', '\t', '\x2', 
		'\x2', '!', '\"', '\a', '\a', '\x2', '\x2', '\"', '#', '\x5', '\x4', '\x3', 
		'\x2', '#', '$', '\a', '\b', '\x2', '\x2', '$', '&', '\x3', '\x2', '\x2', 
		'\x2', '%', ' ', '\x3', '\x2', '\x2', '\x2', '%', '!', '\x3', '\x2', '\x2', 
		'\x2', '&', '\t', '\x3', '\x2', '\x2', '\x2', '\a', '\x11', '\x13', '\x1B', 
		'\x1D', '%',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
