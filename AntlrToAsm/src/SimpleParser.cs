//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\AntlrToAsm\Simple.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SimpleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, MUL=12, DIV=13, MOD=14, ADD=15, SUB=16, ID=17, INT=18, 
		WS=19;
	public const int
		RULE_prog = 0, RULE_stm = 1, RULE_opt_stmts = 2, RULE_stmt_list = 3, RULE_expr = 4;
	public static readonly string[] ruleNames = {
		"prog", "stm", "opt_stmts", "stmt_list", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "'print'", "'if'", "'then'", "'while'", "'do'", "'begin'", 
		"'end'", "';'", "'('", "')'", "'*'", "'/'", "'mod'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"MUL", "DIV", "MOD", "ADD", "SUB", "ID", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SimpleParser.Eof, 0); }
		public StmContext[] stm() {
			return GetRuleContexts<StmContext>();
		}
		public StmContext stm(int i) {
			return GetRuleContext<StmContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10; stm();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << ID))) != 0) );
			State = 15; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmContext : ParserRuleContext {
		public StmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stm; } }
	 
		public StmContext() { }
		public virtual void CopyFrom(StmContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : StmContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeginendContext : StmContext {
		public Opt_stmtsContext opt_stmts() {
			return GetRuleContext<Opt_stmtsContext>(0);
		}
		public BeginendContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterBeginend(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitBeginend(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfthenContext : StmContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmContext stm() {
			return GetRuleContext<StmContext>(0);
		}
		public IfthenContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterIfthen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitIfthen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhiledoContext : StmContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmContext stm() {
			return GetRuleContext<StmContext>(0);
		}
		public WhiledoContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterWhiledo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitWhiledo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhiledo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : StmContext {
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(StmContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmContext stm() {
		StmContext _localctx = new StmContext(Context, State);
		EnterRule(_localctx, 2, RULE_stm);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; Match(ID);
				State = 18; Match(T__0);
				State = 19; expr(0);
				}
				break;
			case T__1:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; Match(T__1);
				State = 21; expr(0);
				}
				break;
			case T__2:
				_localctx = new IfthenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 22; Match(T__2);
				State = 23; expr(0);
				State = 24; Match(T__3);
				State = 25; stm();
				}
				break;
			case T__4:
				_localctx = new WhiledoContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 27; Match(T__4);
				State = 28; expr(0);
				State = 29; Match(T__5);
				State = 30; stm();
				}
				break;
			case T__6:
				_localctx = new BeginendContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 32; Match(T__6);
				State = 33; opt_stmts();
				State = 34; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmtsContext : ParserRuleContext {
		public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public Opt_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterOpt_stmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitOpt_stmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpt_stmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmtsContext opt_stmts() {
		Opt_stmtsContext _localctx = new Opt_stmtsContext(Context, State);
		EnterRule(_localctx, 4, RULE_opt_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << ID))) != 0)) {
				{
				State = 38; stmt_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_listContext : ParserRuleContext {
		public StmContext[] stm() {
			return GetRuleContexts<StmContext>();
		}
		public StmContext stm(int i) {
			return GetRuleContext<StmContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; stm();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 42; Match(T__8);
				State = 43; stm();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(SimpleParser.DIV, 0); }
		public DivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(SimpleParser.ADD, 0); }
		public AddContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(SimpleParser.SUB, 0); }
		public SubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(SimpleParser.MOD, 0); }
		public ModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(SimpleParser.MUL, 0); }
		public MulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(SimpleParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 50; Match(INT);
				}
				break;
			case ID:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(ID);
				}
				break;
			case T__9:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 52; Match(T__9);
				State = 53; expr(0);
				State = 54; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 73;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new MulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 59; ((MulContext)_localctx).op = Match(MUL);
						State = 60; expr(9);
						}
						break;
					case 2:
						{
						_localctx = new DivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 62; ((DivContext)_localctx).op = Match(DIV);
						State = 63; expr(8);
						}
						break;
					case 3:
						{
						_localctx = new ModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 64;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 65; ((ModContext)_localctx).op = Match(MOD);
						State = 66; expr(7);
						}
						break;
					case 4:
						{
						_localctx = new AddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 68; ((AddContext)_localctx).op = Match(ADD);
						State = 69; expr(6);
						}
						break;
					case 5:
						{
						_localctx = new SubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 71; ((SubContext)_localctx).op = Match(SUB);
						State = 72; expr(5);
						}
						break;
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', 'Q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x6', '\x2', '\xE', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\'', '\n', '\x3', 
		'\x3', '\x4', '\x5', '\x4', '*', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '/', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x32', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', ';', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'L', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'O', 
		'\v', '\x6', '\x3', '\x6', '\x2', '\x3', '\n', '\a', '\x2', '\x4', '\x6', 
		'\b', '\n', '\x2', '\x2', '\x2', 'Y', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '&', '\x3', '\x2', '\x2', '\x2', '\x6', ')', '\x3', '\x2', 
		'\x2', '\x2', '\b', '+', '\x3', '\x2', '\x2', '\x2', '\n', ':', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', 
		'\a', '\x2', '\x2', '\x3', '\x12', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x14', '\a', '\x13', '\x2', '\x2', '\x14', '\x15', '\a', '\x3', 
		'\x2', '\x2', '\x15', '\'', '\x5', '\n', '\x6', '\x2', '\x16', '\x17', 
		'\a', '\x4', '\x2', '\x2', '\x17', '\'', '\x5', '\n', '\x6', '\x2', '\x18', 
		'\x19', '\a', '\x5', '\x2', '\x2', '\x19', '\x1A', '\x5', '\n', '\x6', 
		'\x2', '\x1A', '\x1B', '\a', '\x6', '\x2', '\x2', '\x1B', '\x1C', '\x5', 
		'\x4', '\x3', '\x2', '\x1C', '\'', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '\a', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\n', '\x6', 
		'\x2', '\x1F', ' ', '\a', '\b', '\x2', '\x2', ' ', '!', '\x5', '\x4', 
		'\x3', '\x2', '!', '\'', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', 
		'\t', '\x2', '\x2', '#', '$', '\x5', '\x6', '\x4', '\x2', '$', '%', '\a', 
		'\n', '\x2', '\x2', '%', '\'', '\x3', '\x2', '\x2', '\x2', '&', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x16', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '&', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '&', '\"', '\x3', '\x2', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '(', '*', '\x5', '\b', '\x5', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '\a', '\x3', 
		'\x2', '\x2', '\x2', '+', '\x30', '\x5', '\x4', '\x3', '\x2', ',', '-', 
		'\a', '\v', '\x2', '\x2', '-', '/', '\x5', '\x4', '\x3', '\x2', '.', ',', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\t', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\b', '\x6', '\x1', '\x2', '\x34', 
		';', '\a', '\x14', '\x2', '\x2', '\x35', ';', '\a', '\x13', '\x2', '\x2', 
		'\x36', '\x37', '\a', '\f', '\x2', '\x2', '\x37', '\x38', '\x5', '\n', 
		'\x6', '\x2', '\x38', '\x39', '\a', '\r', '\x2', '\x2', '\x39', ';', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x33', '\x3', '\x2', '\x2', '\x2', ':', '\x35', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x36', '\x3', '\x2', '\x2', '\x2', ';', 
		'M', '\x3', '\x2', '\x2', '\x2', '<', '=', '\f', '\n', '\x2', '\x2', '=', 
		'>', '\a', '\xE', '\x2', '\x2', '>', 'L', '\x5', '\n', '\x6', '\v', '?', 
		'@', '\f', '\t', '\x2', '\x2', '@', '\x41', '\a', '\xF', '\x2', '\x2', 
		'\x41', 'L', '\x5', '\n', '\x6', '\n', '\x42', '\x43', '\f', '\b', '\x2', 
		'\x2', '\x43', '\x44', '\a', '\x10', '\x2', '\x2', '\x44', 'L', '\x5', 
		'\n', '\x6', '\t', '\x45', '\x46', '\f', '\a', '\x2', '\x2', '\x46', 'G', 
		'\a', '\x11', '\x2', '\x2', 'G', 'L', '\x5', '\n', '\x6', '\b', 'H', 'I', 
		'\f', '\x6', '\x2', '\x2', 'I', 'J', '\a', '\x12', '\x2', '\x2', 'J', 
		'L', '\x5', '\n', '\x6', '\a', 'K', '<', '\x3', '\x2', '\x2', '\x2', 'K', 
		'?', '\x3', '\x2', '\x2', '\x2', 'K', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'K', '\x45', '\x3', '\x2', '\x2', '\x2', 'K', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', '\t', '\xF', '&', 
		')', '\x30', ':', 'K', 'M',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
